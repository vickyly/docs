对使用 Redis 前的一些说明

合理的命名规则
---

在使用 Redis 时，随着应用程序需求的修改，忽略某些存储在 Redis 的数据非常正常。但这些不再使用的数据平白无故的占用多余内存，只能等被剔除算法剔除，而一般没设置过期时间的数据被默认为永不过期。所以需要平时对 Redis 命名有成熟的命名规则，合适的命名规则也更适合管理。这里推荐使用 `:` 分隔的命名方式。如 `db:table:column`这种形式。另外，注意键值的大小，太大的键会占用更多内存，而键太小可能会意思不明确。

使用合适的数据结构
---
Redis 在很多方面都对内存的使用进行了优化。虽然如此，在使用 Redis 时仍需要注意使用合适的数据结构，如对于关系型数据，尽量使用 hash 代替 string，除了能减少冗余键和方便修改部分属性外，其还有个优点：当 Redis 是分布式，多个 key(如 id:foo:age 和 id:foo:score) 的 hash 不同，可能分布在不同的 Redis 机器上，这样当想取 id:foo 信息时，需要从多个 Redis 上取。

Pipeline
---
合理的使用 Pipeline 能有效的提高效率。但 Pipeline 中命令过多或者 Pipeline 中部分命令（如hgetall等）花费时间很长时，会出现 Redis 卡住的情况。对于 Pipeline 中命令过多的情况，可以减少命令数，或者使用 lua 将请求由 Redis(单线程)转给 Nginx(使用多线程)。对于部分花费时间长的命令，应禁止其使用 pipeline。

HGETALL、SMEMBERS、KEYS
---
由于 Redis 是单进程的，当一条命令的处理时间过长时，其它请求只能等着。对于 HGETALL 而言，就是这样的一条命令，HGETALL 必须遍历所有字段，所有当 hash 字段越来越多时，其消耗的 CPU 资源也越来越多。在 hash 中，可以尝试将所有字段再放到一个新的字段(如字段名为all)中，若需要所有字段，`hget key all` 即可，但这种方式又消耗大量内存。所以对于获取所有key的操作，建议使用 `SCAN` 系列命令。
`
优化？
---
pipeline?
